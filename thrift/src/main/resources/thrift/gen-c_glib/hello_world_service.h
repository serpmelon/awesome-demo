/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HELLO_WORLD_SERVICE_H
#define HELLO_WORLD_SERVICE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "helloworld_types.h"

/* HelloWorldService service interface */
typedef struct _HelloWorldServiceIf HelloWorldServiceIf;  /* dummy object */

struct _HelloWorldServiceIfInterface
{
  GTypeInterface parent;

  gboolean (*say_hello) (HelloWorldServiceIf *iface, gchar ** _return, const gchar * name, GError **error);
};
typedef struct _HelloWorldServiceIfInterface HelloWorldServiceIfInterface;

GType hello_world_service_if_get_type (void);
#define TYPE_HELLO_WORLD_SERVICE_IF (hello_world_service_if_get_type())
#define HELLO_WORLD_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HELLO_WORLD_SERVICE_IF, HelloWorldServiceIf))
#define IS_HELLO_WORLD_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HELLO_WORLD_SERVICE_IF))
#define HELLO_WORLD_SERVICE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_HELLO_WORLD_SERVICE_IF, HelloWorldServiceIfInterface))

gboolean hello_world_service_if_say_hello (HelloWorldServiceIf *iface, gchar ** _return, const gchar * name, GError **error);

/* HelloWorldService service client */
struct _HelloWorldServiceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _HelloWorldServiceClient HelloWorldServiceClient;

struct _HelloWorldServiceClientClass
{
  GObjectClass parent;
};
typedef struct _HelloWorldServiceClientClass HelloWorldServiceClientClass;

GType hello_world_service_client_get_type (void);
#define TYPE_HELLO_WORLD_SERVICE_CLIENT (hello_world_service_client_get_type())
#define HELLO_WORLD_SERVICE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HELLO_WORLD_SERVICE_CLIENT, HelloWorldServiceClient))
#define HELLO_WORLD_SERVICE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_HELLO_WORLD_SERVICE_CLIENT, HelloWorldServiceClientClass))
#define HELLO_WORLD_SERVICE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HELLO_WORLD_SERVICE_CLIENT))
#define HELLO_WORLD_SERVICE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HELLO_WORLD_SERVICE_CLIENT))
#define HELLO_WORLD_SERVICE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HELLO_WORLD_SERVICE_CLIENT, HelloWorldServiceClientClass))

gboolean hello_world_service_client_say_hello (HelloWorldServiceIf * iface, gchar ** _return, const gchar * name, GError ** error);
gboolean hello_world_service_client_send_say_hello (HelloWorldServiceIf * iface, const gchar * name, GError ** error);
gboolean hello_world_service_client_recv_say_hello (HelloWorldServiceIf * iface, gchar ** _return, GError ** error);
void hello_world_service_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void hello_world_service_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* HelloWorldService handler (abstract base class) */
struct _HelloWorldServiceHandler
{
  GObject parent;
};
typedef struct _HelloWorldServiceHandler HelloWorldServiceHandler;

struct _HelloWorldServiceHandlerClass
{
  GObjectClass parent;

  gboolean (*say_hello) (HelloWorldServiceIf *iface, gchar ** _return, const gchar * name, GError **error);
};
typedef struct _HelloWorldServiceHandlerClass HelloWorldServiceHandlerClass;

GType hello_world_service_handler_get_type (void);
#define TYPE_HELLO_WORLD_SERVICE_HANDLER (hello_world_service_handler_get_type())
#define HELLO_WORLD_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HELLO_WORLD_SERVICE_HANDLER, HelloWorldServiceHandler))
#define IS_HELLO_WORLD_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HELLO_WORLD_SERVICE_HANDLER))
#define HELLO_WORLD_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_HELLO_WORLD_SERVICE_HANDLER, HelloWorldServiceHandlerClass))
#define IS_HELLO_WORLD_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HELLO_WORLD_SERVICE_HANDLER))
#define HELLO_WORLD_SERVICE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HELLO_WORLD_SERVICE_HANDLER, HelloWorldServiceHandlerClass))

gboolean hello_world_service_handler_say_hello (HelloWorldServiceIf *iface, gchar ** _return, const gchar * name, GError **error);

/* HelloWorldService processor */
struct _HelloWorldServiceProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  HelloWorldServiceHandler *handler;
  GHashTable *process_map;
};
typedef struct _HelloWorldServiceProcessor HelloWorldServiceProcessor;

struct _HelloWorldServiceProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _HelloWorldServiceProcessorClass HelloWorldServiceProcessorClass;

GType hello_world_service_processor_get_type (void);
#define TYPE_HELLO_WORLD_SERVICE_PROCESSOR (hello_world_service_processor_get_type())
#define HELLO_WORLD_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HELLO_WORLD_SERVICE_PROCESSOR, HelloWorldServiceProcessor))
#define IS_HELLO_WORLD_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HELLO_WORLD_SERVICE_PROCESSOR))
#define HELLO_WORLD_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_HELLO_WORLD_SERVICE_PROCESSOR, HelloWorldServiceProcessorClass))
#define IS_HELLO_WORLD_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HELLO_WORLD_SERVICE_PROCESSOR))
#define HELLO_WORLD_SERVICE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HELLO_WORLD_SERVICE_PROCESSOR, HelloWorldServiceProcessorClass))

#endif /* HELLO_WORLD_SERVICE_H */
